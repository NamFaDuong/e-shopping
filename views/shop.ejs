<%- include("template/header.ejs") -%>

    <body>
        <!--=============== HEADER ===============-->
        <%- include("navigation.ejs") %>
            <div id="app">
                <!--=============== CART ===============-->
                <div class="cart" id="cart">
                    <i class="bx bx-x cart__close" id="cart-close"></i>
                    <h2 class="cart__title-center">My Cart</h2>
                    <div class="cart__container" v-if="count_cartlist !=0">
                        <div class="cart_product">
                            <article class="cart__card" v-for="(cart,index) in cart_list" style="margin-bottom: 2px;">
                                <div class="cart__box">
                                    <img src="/img/cart-1.png" alt="" class="cart__img">
                                </div>
                                <div class="cart__details">
                                    <h3 class="cart__title">{{ cart.name }}</h3>
                                    <span class="cart__price">${{ cart.price }}</span>

                                    <div class="cart__amount">
                                        <div class="cart__amount-content">
                                            <span class="cart__amount-number">
                                                <input type="number" class="cart_qty" :value="cart.qty">
                                            </span>
                                        </div>
                                        <i class="bx bx-trash-alt cart__amount-trash" @click="delete_item(index)"></i>
                                    </div>
                                </div>
                            </article>
                        </div>

                    </div>
                    <div class="cart__prices" v-if="count_cartlist !=0">
                        <span class="cart__price-item">{{ count_cartlist }} item</span>
                        <span class="cart__price-total">{{ total_price.toFixed(2) }}$</span>
                    </div>


                    <div class="payment_input" v-if="count_cartlist !=0"
                        style="display: flex;justify-content: space-between;">
                        <span>Promotion : %</span>
                        <input type="number" style="display: block;text-align: end;max-width: 100px;margin-bottom: 2px;"
                            name="promotion" id="promotion" v-model="promotion" @input="discount()">
                    </div>

                    <div class="payment_input" v-if="count_cartlist !=0"
                        style="display: flex;justify-content: space-between;">
                        <span>Payment : $</span>
                        <input type="number" style="display: block;text-align: end;max-width: 100px;margin-bottom: 2px;"
                            name="payment_price" id="payment_price" v-model="payment_amount"
                            @input="calculateReturn_price()">
                    </div>


                    <div class="payment_input" v-if="count_cartlist !=0"
                        style="display: flex;justify-content: space-between;">
                        <span>Grand Total: </span>
                        <span>${{ grand_total.toFixed(2) }}</span>
                    </div>

                    <div class="payment_input" v-if="count_cartlist !=0"
                        style="display: flex;justify-content: space-between;">
                        <span style="color: red;">Return Money: ${{ return_price.toFixed(2) }} </span>
                    </div>

                    <div class="paymentbutton" style="display: block; text-align: end;padding-top: 1rem;"
                        v-if="count_cartlist !=0">
                        <button class="button" @click="payment();">Order now</button>
                    </div>
                </div>

                <!--=============== user ===============-->
                <%- include("template/user_card.ejs") %>

                    <!--=============== MAIN ===============-->
                    <main class="main">
                        <!--=============== SHOP ===============-->
                        <section class="shop section container">
                            <h2 class="breadcrumb__title">Shop Page</h2>
                            <h3 class="breadcrumb__subtitle">Home > <span>Shop</span></h3>

                            <div class="shop__container grid">
                                <div class="sidebar">
                                    <h3 class="filter__title">Select filters</h3>

                                    <div class="filter__content">
                                        <h3 class="filter__subtitle">Condition</h3>
                                        <div class="filter">
                                            <input type="radio" name="filter" id="filter" @click="getProducts()"
                                                checked="checked">
                                            <p>All</p>
                                        </div>
                                        <div class="filter__content" v-for="(condition,index) in condition_list">
                                            <div class="filter">
                                                <input type="radio" name="filter" id="filter"
                                                    @click="getFilterByCondition(condition.id)">
                                                <p>{{ condition.condition_name }}</p>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="filter__content">
                                        <h3 class="filter__subtitle">Categories</h3>

                                        <div class="filter__content">
                                            <div class="filter" v-for="(categories,index) in category_list">
                                                <input type="radio" name="filter" id="filter"
                                                    @click="getFilterByCategory(categories.id)">
                                                <p>{{ categories.category }}</p>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="filter__content">
                                        <h3 class="filter__subtitle">Size</h3>

                                        <div class="filter__content" v-for="(sizess,index) in size_list">
                                            <div class="filter">
                                                <input type="radio" name="filter" id="filter"
                                                    @click="getFilterBySize(sizess.id)">
                                                <p>{{ sizess.size }}</p>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="filter__content">
                                        <h3 class="filter__subtitle">Styles</h3>

                                        <div class="filter__content" v-for="(styles,index) in style_list">
                                            <div class="filter">
                                                <input type="radio" name="filter" id="filter"
                                                    @click="getFilterByStyle(styles.id)">
                                                <p>{{ styles.style }}</p>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="filter__content">
                                        <h3 class="filter__subtitle">Sub Categories</h3>

                                        <div class="filter__content" v-for="(subcates,index) in subcate_list">
                                            <div class="filter">
                                                <input type="radio" name="filter" id="filter"
                                                    @click="getFilterBySubCategory(subcates.id)">
                                                <p>{{ subcates.sub_category }}</p>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="shop__items grid">
                                    <div class="shop__content" v-for="(products,index) in product_list"
                                        @click="shop_cart(products)">
                                        <div class="shop__tag">{{ products.condition_name }}</div>
                                        <img :src="products.image" alt="image" class="shop__img">
                                        <h3 class="shop__title">{{ products.product }}</h3>
                                        <span class="shop__subtitle">{{ products.sub_category }}</span>
                                        <div class="shop__prices">
                                            <span class="shop__price">${{ products.price }}</span>
                                            <span class="shop__discounts">%{{ products.discount }}</span>
                                        </div>
                                        <!-- <center>
                                            <button class="button"
                                                style="padding: 5px 10px;background-color: blue; margin-top: 2px;"
                                                @click="view_detail(products.id)">
                                                View
                                                details</button>
                                        </center> -->
                                        <button class="button shop__button" @click="shop_cart(products)">
                                            <i class="bx bx-cart-alt shop__icon"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div class="pagination">
                                <div class="bx bx-chevron-left pagination__icon"></div>
                                <span class="current active-pagination">1</span>
                                <span>2</span>
                                <span>3</span>
                                <span>&middot; &middot; &middot;</span>
                                <span>9</span>
                                <i class="bx bx-chevron-right pagination__icon"></i>
                            </div>
                        </section>
                    </main>
                    <!--=============== FOOTER ===============-->
                    <%- include("footer.ejs") -%>
            </div>
            <%- include("template/link_footer.ejs") -%>
                <script>
                    const { createApp } = Vue;
                    createApp({
                        mounted() {
                            /*=============== SHOW MENU ===============*/
                            const navMenu = document.getElementById('nav-menu'),
                                navToggle = document.getElementById('nav-toggle'),
                                navClose = document.getElementById('nav-close');


                            /*===== MENU SHOW =====*/
                            /* Validate if constant exists */
                            if (navToggle) {
                                navToggle.addEventListener('click', () => {
                                    navMenu.classList.add('show-menu');
                                })
                            }

                            /*===== MENU HIDDEN =====*/
                            /* Validate if constant exists */
                            if (navClose) {
                                navClose.addEventListener('click', () => {
                                    navMenu.classList.remove('show-menu');
                                })
                            }

                            /*=============== SHOW CART ===============*/
                            const cart = document.getElementById('cart'),
                                cartShop = document.getElementById('cart-shop'),
                                cartClose = document.getElementById('cart-close');

                            /*===== CART SHOW =====*/
                            /* Validate if constant exists */
                            if (cartShop) {
                                cartShop.addEventListener('click', () => {
                                    cart.classList.add('show-cart');
                                })
                            }

                            /*===== CART HIDDEN =====*/
                            /* Validate if constant exists */
                            if (cartClose) {
                                cartClose.addEventListener('click', () => {
                                    cart.classList.remove('show-cart');
                                })
                            }

                            /*=============== SHOW user ===============*/
                            const user = document.getElementById('user'),
                                usertoggle = document.getElementById('user-toggle'),
                                userClose = document.getElementById('user-close');

                            /*===== user SHOW =====*/
                            /* Validate if constant exists */
                            if (usertoggle) {
                                usertoggle.addEventListener('click', () => {
                                    user.classList.add('show-user');
                                })
                            }

                            /*===== user HIDDEN =====*/
                            /* Validate if constant exists */
                            if (userClose) {
                                userClose.addEventListener('click', () => {
                                    user.classList.remove('show-user');
                                })
                            }

                            /*=============== HOME SWIPER ===============*/
                            var homeswiper = new Swiper(".home-swiper", {
                                spaceBetween: 30,
                                loop: 'true',

                                pagination: {
                                    el: ".swiper-pagination",
                                    clickable: true,
                                }
                            });

                            /*=============== CHANGE BACKGROUND HEADER ===============*/
                            function scrollHeader() {
                                const header = document.getElementById('header');
                                if (this.scrollY >= 50) {
                                    header.classList.add('scroll-header');
                                }
                                else {
                                    header.classList.remove('scroll-header');
                                }
                            }
                            window.addEventListener('scroll', scrollHeader);

                            /*=============== NEW SWIPER ===============*/
                            var newswiper = new Swiper(".new-swiper", {
                                spaceBetween: 15,
                                centeredSlides: true,
                                slidesPerView: 'auto',
                                loop: 'true',
                            });

                            /*=============== SHOW SCROLL UP ===============*/
                            function scrollUp() {
                                const scrollUp = document.getElementById('scroll-up');
                                if (this.scrollY >= 350) {
                                    scrollUp.classList.add('show-scroll');
                                }
                                else {
                                    scrollUp.classList.remove('show-scroll');
                                }
                            }
                            window.addEventListener('scroll', scrollUp);
                            /*=============== LIGHT BOX ===============*/


                            /*=============== QUESTIONS ACCORDION ===============*/
                            const accordionItem = document.querySelectorAll('.questions__item');
                            accordionItem.forEach((item) => {
                                const accordionHeader = item.querySelector('.questions__header');
                                accordionHeader.addEventListener('click', () => {
                                    const openItem = document.querySelector('.accordion-open');
                                    toggleItem(item);
                                    if (openItem && openItem !== item) {
                                        toggleItem(openItem);
                                    }
                                });
                            });
                            const toggleItem = (item) => {
                                const accordionContent = item.querySelector('.questions__content');

                                if (item.classList.contains('accordion-open')) {
                                    accordionContent.removeAttribute('style');
                                    item.classList.remove('accordion-open');
                                } else {
                                    accordionContent.style.height = accordionContent.scrollHeight + 'px';
                                    item.classList.add('accordion-open');
                                }
                            };

                            /*=============== STYLE SWITCHER ===============*/
                            const styleSwitcherToggle = document.querySelector(".style__switcher-toggler");
                            styleSwitcherToggle.addEventListener("click", () => {
                                document.querySelector(".style__switcher").classList.toggle("open");

                            });
                            // HIDE STYLE SWITCHER ON SCROLL
                            window.addEventListener("scroll", () => {
                                if (document.querySelector(".style__switcher").classList.contains("open")) {
                                    document.querySelector(".style__switcher").classList.remove("open");
                                }
                            })
                            // THEME COLORS
                            function themeColors() {
                                const colorStyle = document.querySelector(".js-color-style"),
                                    themeColorsContainer = document.querySelector(".js-theme-colors");
                                themeColorsContainer.addEventListener("click", ({ target }) => {
                                    if (target.classList.contains("js-theme-color-item")) {
                                        localStorage.setItem("color", target.getAttribute("data-js-theme-color"));
                                        setColors();
                                    }
                                })
                                function setColors() {
                                    let path = colorStyle.getAttribute("href").split("/");
                                    path = path.slice(0, path.length - 1);
                                    colorStyle.setAttribute("href", path.join("/") + "/" + localStorage.getItem("color") + ".css");

                                    if (document.querySelector(".js-theme-color-item.active")) {
                                        document.querySelector(".js-theme-color-item.active").classList.remove("active");
                                    }
                                    document.querySelector("[data-js-theme-color=" + localStorage.getItem("color") + "]").classList.add("active");
                                }
                                if (localStorage.getItem("color") !== null) {
                                    setColors();
                                }
                                else {
                                    const defaultColor = colorStyle.getAttribute("href").split("/").pop().split(".").shift();
                                    document.querySelector("[data-js-theme-color=" + defaultColor + "]").classList.add("active");

                                }
                            }
                            themeColors();
                        },
                        created() {
                            this.getProducts(),
                                this.getCategories(),
                                this.getCondition(),
                                this.getSizes(),
                                this.getStyles(),
                                this.getSubCategory()
                        },
                        data() {
                            return {
                                product_list: [],
                                condition_list: [],
                                size_list: [],
                                category_list: [],
                                style_list: [],
                                subcate_list: [],
                                category_filter: [],
                                cart_list: [],
                                count_cartlist: 0,
                                total_price: 0,
                                payment_amount: 0,
                                promotion: 0,
                                grand_total: 0,
                                return_price: 0,
                            };
                        },
                        methods: {
                            clearInfor() {
                                this.cart_list = [],
                                    this.count_cartlist = 0,
                                    this.total_price = 0,
                                    this.payment_amount = 0,
                                    this.promotion = 0,
                                    this.grand_total = 0,
                                    this.return_price = 0
                            },
                            getProducts() {
                                fetch('http://localhost:3000/api/products')
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        this.product_list = data;
                                    })
                                    .catch(error => {
                                        console.error('Error fetching data:', error);
                                    });
                            },
                            getCategories() {
                                fetch('http://localhost:3000/api/category')
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        this.category_list = data;
                                    })
                                    .catch(error => {
                                        console.error('Error fetching data:', error);
                                    });
                            },
                            getCondition() {
                                fetch('http://localhost:3000/api/conditon')
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        this.condition_list = data;
                                    })
                                    .catch(error => {
                                        console.error('Error fetching data:', error);
                                    });
                            },
                            getSizes() {

                                fetch('http://localhost:3000/api/size')
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        this.size_list = data;
                                    })
                                    .catch(error => {
                                        console.error('Error fetching data:', error);
                                    });
                            },
                            getStyles() {
                                fetch('http://localhost:3000/api/style')
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        this.style_list = data;
                                    })
                                    .catch(error => {
                                        console.error('Error fetching data:', error);
                                    });
                            },
                            getSubCategory() {
                                fetch('http://localhost:3000/api/subcategory')
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        this.subcate_list = data;
                                    })
                                    .catch(error => {
                                        console.error('Error fetching data:', error);
                                    });
                            },
                            getFilterByCategory(category_id) {
                                fetch('http://localhost:3000/api/filtercategory?category_id=' + category_id)
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        this.product_list = data;
                                    })
                                    .catch(error => {
                                        console.error('Error fetching data:', error);
                                    });
                            },
                            getFilterBySize(sizess_id) {
                                fetch('http://localhost:3000/api/filterSize?size_id=' + sizess_id)
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        this.product_list = data;
                                    })
                                    .catch(error => {
                                        console.error('Error fetching data:', error);
                                    });
                            },
                            getFilterByStyle(style_id) {
                                fetch('http://localhost:3000/api/filterStyle?style_id=' + style_id)
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        this.product_list = data;
                                    })
                                    .catch(error => {
                                        console.error('Error fetching data:', error);
                                    });
                            },
                            getFilterByCondition(condition_id) {
                                fetch('http://localhost:3000/api/filterCondition?condition_id=' + condition_id)
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        this.product_list = data;
                                    })
                                    .catch(error => {
                                        console.error('Error fetching data:', error);
                                    });
                            },
                            getFilterBySubCategory(subCategory_id) {
                                fetch('http://localhost:3000/api/filterSubcate?subCategory_id=' + subCategory_id)
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        this.product_list = data;
                                    })
                                    .catch(error => {
                                        console.error('Error fetching data:', error);
                                    });
                            },
                            shop_cart(products) {
                                let vm = this
                                let is_dpl = false
                                let dpl = this.cart_list.find(obj => {
                                    if (obj.product_id == products.id) {
                                        obj.qty++
                                        is_dpl = true
                                    }
                                })
                                if (is_dpl == false) {
                                    this.cart_list.push({
                                        'product_id': products.id,
                                        'name': products.product,
                                        'qty': 1,
                                        'price': products.price,
                                        'discount': products.discount,
                                    })
                                }
                                vm.count_cartlist = vm.cart_list.length;
                                vm.calculate_price();

                            },
                            delete_item(index_item) {
                                this.cart_list.splice(index_item, 1);
                                this.calculate_price();
                                this.count_cartlist = this.cart_list.length;
                            },
                            calculate_price() {
                                this.total_price = 0;
                                this.cart_list.forEach(obj => {
                                    let sub_total = (parseFloat(obj.qty) * parseFloat(obj.price)) - (parseFloat(obj.qty) * parseFloat(obj.price)) * (parseFloat(obj.discount) / 100);
                                    this.total_price += sub_total;
                                })
                                this.grand_total = this.total_price;
                                this.calculateReturn_price();
                            },
                            discount() {
                                this.grand_total = this.total_price - (this.total_price * this.promotion) / 100
                                this.calculateReturn_price();
                            },
                            calculateReturn_price() {
                                this.return_price = 0
                                this.return_price = this.payment_amount - this.grand_total
                            },
                            async payment() {
                                if (this.cart_list.length !== 0) {

                                    if (parseFloat(this.payment_amount) >= parseFloat(this.grand_total.toFixed(2))) {
                                        try {
                                            // Await the response from the API call
                                            const response = await axios.post('http://localhost:3000/api/payment', {
                                                cart_list: this.cart_list,
                                                total_price: this.total_price,
                                                discount: this.promotion,
                                            });

                                            // Check if the API returned a success message
                                            if (response.data.success) {
                                                // Show success message
                                                this.responseMessage = response.data.message;
                                                Swal.fire({
                                                    icon: "success",
                                                    title: "Order Success",
                                                    text: response.data.message,  // Optional: Show a custom success message
                                                    showConfirmButton: false,
                                                    timer: 2000, // Optional: Auto close after 2 seconds
                                                });
                                                this.clearInfor();
                                            } else {
                                                // If the success flag is not present or false
                                                Swal.fire({
                                                    icon: "error",
                                                    title: "Payment Failed",
                                                    text: response.data.message || 'Something went wrong. Please try again.',
                                                });
                                            }
                                        } catch (error) {
                                            console.error('There was an error!', error);
                                            Swal.fire({
                                                icon: "error",
                                                title: "Payment Error",
                                                text: "There was an error processing your payment. Please try again later.",
                                            });
                                        }
                                    } else {
                                        Swal.fire({
                                            icon: "error",
                                            title: "Error",
                                            text: "Please add more money",
                                        });
                                        return;
                                    }
                                } else {
                                    Swal.fire({
                                        icon: "warning",
                                        title: "Cart is empty",
                                        text: "Please add items to your cart before proceeding.",
                                    });
                                }
                            },
                        },
                    }).mount('#app');
                </script>
    </body>

    </html>