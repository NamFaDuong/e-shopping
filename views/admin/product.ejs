<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Admin</title>
    <style>
        .picture_box {
            display: inline;
            text-align: center;
            padding: 5px;
        }

        .image-placeholder {
            width: 150px;
            height: 150px;
            border: 2px dashed #ccc;
            border-radius: 5px;
            margin-bottom: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            margin: auto;
        }

        .image-placeholder:hover {
            background-color: #f0f0f0;
        }

        .image-placeholder img {
            max-width: 100%;
            max-height: 100%;
        }

        .file-input {
            display: none;
        }

        .button_upload {
            display: block;
            margin: auto;
            text-align: center;
            padding-top: 5px;
        }

        .browse-button {
            padding-top: 10px;
            background-color: #007bff;
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .browse-button:hover {
            background-color: #0056b3;
        }

        .information {
            font-size: 12px;
            color: #6c757d;
        }
    </style>
    <%- include("admin_template/link_style.ejs") %>
</head>

<body class="hold-transition sidebar-mini">
    <div class="wrapper" id="app">

        <!-- Navbar -->
        <nav class="main-header navbar navbar-expand navbar-white navbar-light">
            <!-- Left navbar links -->
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
                </li>
            </ul>

            <!-- Right navbar links -->
            <ul class="navbar-nav ml-auto">
                <!-- Navbar Search -->
                <li class="nav-item">
                    <div class="navbar-search-block">
                        <form class="form-inline">
                            <div class="input-group input-group-sm">
                                <input class="form-control form-control-navbar" type="search" placeholder="Search"
                                    aria-label="Search">
                                <div class="input-group-append">
                                    <button class="btn btn-navbar" type="submit">
                                        <i class="fas fa-search"></i>
                                    </button>
                                    <button class="btn btn-navbar" type="button" data-widget="navbar-search">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </li>
            </ul>
        </nav>
        <!-- /.navbar -->

        <!-- Main Sidebar Container -->
        <aside class="main-sidebar sidebar-dark-primary elevation-4">
            <!-- Brand Logo -->
            <a href="#" class="brand-link">
                <img src="dist/img/AdminLTELogo.png" alt="AdminLTE Logo" class="brand-image img-circle elevation-3"
                    style="opacity: .8">
                <span class="brand-text font-weight-light">E-shop</span>
            </a>

            <!-- Sidebar -->
            <div class="sidebar">
                <!-- Sidebar user panel (optional) -->
                <div class="user-panel mt-3 pb-3 mb-3 d-flex">
                    <div class="image">
                        <img src="dist/img/user2-160x160.jpg" class="img-circle elevation-2" alt="User Image">
                    </div>
                    <div class="info">
                        <a href="#" class="d-block">
                            <%= global.user %>
                        </a>
                    </div>
                </div>
                <!-- Sidebar Menu -->
                <%- include("admin_template/admin_navigation.ejs")%>
                    <!-- /.sidebar-menu -->
            </div>
            <!-- /.sidebar -->
        </aside>

        <!-- Content Wrapper. Contains page content -->
        <div class="content-wrapper">
            <!-- Content Header (Page header) -->
            <div class="content-header">
                <div class="container-fluid">
                    <div class="row mb-2">
                        <div class="col-sm-6">
                            <h1 class="m-0">Product Page</h1>
                        </div><!-- /.col -->
                        <div class="col-sm-6">
                            <ol class="breadcrumb float-sm-right">
                                <li class="breadcrumb-item"><a href="#">Product</a></li>
                                <li class="breadcrumb-item active">Product Page</li>
                            </ol>
                        </div><!-- /.col -->
                    </div><!-- /.row -->
                </div><!-- /.container-fluid -->
            </div>
            <!-- /.content-header -->

            <!-- Start Form Insert New -->
            <!-- Modal -->
            <div class="modal fade" id="myModal" data-backdrop="static" data-keyboard="false" tabindex="-1"
                aria-labelledby="staticBackdropLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="staticBackdropLabel" v-if="status == 'add'">New Product
                            </h5>
                            <h5 class="modal-title" id="staticBackdropLabel" v-if="status == 'update'">Update Product
                                Information</h5>
                        </div>
                        <div class="modal-body">
                            <form method="" action="" enctype="multipart/form-data">
                                <div class="container-fluid">
                                    <div class="row">
                                        <div class="col-lg-6">
                                            <!-- Product Information -->
                                            <div class="card">
                                                <div class="card-header border-0">
                                                    <h3 class="card-title">Products</h3>
                                                </div>
                                                <div class="card-body table-responsive p-3">
                                                    <div class="form-group">
                                                        <label for="product_name">Product <span
                                                                style="color: red">*</span></label>
                                                        <input type="text" class="form-control" id="product_name"
                                                            placeholder="Your products name" v-model="form.name">
                                                    </div>
                                                    <div class="form-group">
                                                        <label for="product_description">Products Description</label>
                                                        <textarea class="form-control" id="product_description" rows="3"
                                                            placeholder="Descriptions"
                                                            v-model="form.descrition"></textarea>
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- /.Product Information -->

                                            <!-- Pricing -->
                                            <div class="card">
                                                <div class="card-header border-1">
                                                    <div class="row">
                                                        <div class="col">
                                                            <div class="form-group">
                                                                <label for="product_cost">Quantity <span
                                                                        style="color: red">*</span></label>
                                                                <input type="number" class="form-control"
                                                                    id="product_cost" required
                                                                    placeholder="Your quantity" v-model="form.qty">
                                                            </div>
                                                        </div>
                                                        <div class="col">
                                                            <div class="form-group">
                                                                <label for="product_price">Discount <span
                                                                        style="color: red"></span></label>
                                                                <input type="number" class="form-control"
                                                                    id="product_price" required
                                                                    placeholder="Your Discount" v-model="form.discount">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="card-body table-responsive">
                                                    <div class="row">
                                                        <div class="col">
                                                            <div class="form-group">
                                                                <label for="product_cost">Cost <span
                                                                        style="color: red">*</span></label>
                                                                <input type="number" class="form-control"
                                                                    id="product_cost" required placeholder="Your cost"
                                                                    v-model="form.cost">
                                                            </div>
                                                        </div>
                                                        <div class="col">
                                                            <div class="form-group">
                                                                <label for="product_price">Price <span
                                                                        style="color: red">*</span></label>
                                                                <input type="number" class="form-control"
                                                                    id="product_price" required placeholder="Your Price"
                                                                    v-model="form.price">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- /.card -->
                                        </div>
                                        <!-- /.col-md-6 -->
                                        <div class="col-lg-6">
                                            <div class="card">
                                                <div class="card-header">
                                                    <div class="row">
                                                        <div class="col">
                                                            <div class="form-group">
                                                                <label for="inputState">Size <span
                                                                        style="color: red">*</span></label>
                                                                <select id="inputState" class="form-control"
                                                                    v-model="form.size">
                                                                    <option selected disabled :value="0">Choose size
                                                                    </option>
                                                                    <option v-for="size_item in size_list"
                                                                        :value="size_item.id">{{
                                                                        size_item.size }}</option>
                                                                </select>
                                                            </div>
                                                        </div>
                                                        <div class="col">
                                                            <div class="form-group">
                                                                <label for="inputState">Category <span
                                                                        style="color: red">*</span></label>
                                                                <select id="inputState" class="form-control"
                                                                    v-model="form.category">
                                                                    <option selected disabled :value="0">Choose category
                                                                    </option>
                                                                    <option v-for="category_item in category_list"
                                                                        :value="category_item.id">{{
                                                                        category_item.category }}</option>
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="card">
                                                <div class="card-body">
                                                    <div class="form-group">
                                                        <label for="inputState">Sub Category <span
                                                                style="color: red">*</span></label>
                                                        <select id="inputState" class="form-control"
                                                            v-model="form.subcategory">
                                                            <option selected disabled :value="0">Choose sub category
                                                            </option>
                                                            <option v-for="subcategory_item in subcategory_list"
                                                                :value="subcategory_item.id">{{
                                                                subcategory_item.sub_category }}</option>
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="card">
                                                <div class="card-header">
                                                    <div class="row">
                                                        <div class="col">
                                                            <div class="form-group">
                                                                <label for="inputState">Style</label>
                                                                <select id="inputState" class="form-control"
                                                                    v-model="form.style">
                                                                    <option selected disabled :value="0">Choose Style
                                                                    </option>
                                                                    <option v-for="style_item in style_list"
                                                                        :value="style_item.id">{{
                                                                        style_item.style }}</option>
                                                                </select>
                                                            </div>
                                                        </div>
                                                        <div class="col">
                                                            <div class="form-group">
                                                                <label for="inputState">Condition</label>
                                                                <select id="inputState" class="form-control"
                                                                    v-model="form.condition">
                                                                    <option selected disabled :value="0">Choose
                                                                        condition
                                                                    </option>
                                                                    <option v-for="condition_item in condition_list"
                                                                        :value="condition_item.id">{{
                                                                        condition_item.condition_name }}</option>
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                            <div class="card">
                                                <div class="picture_box">
                                                    <div class="image-placeholder">
                                                        <img v-if="imageSrc" :src="imageSrc" alt="Uploaded Image">
                                                    </div>
                                                    <input type="file" id="imageUpload" class="file-input"
                                                        ref="fileInput" name="images_file" @change="handleFileUpload">
                                                    <div class="button_upload">
                                                        <button class="browse-button" type="button"
                                                            @click="triggerFileInput()">
                                                            Browse
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <!-- /.col-md-6 -->
                                    </div>
                                    <!-- /.row -->
                                </div>
                            </form>
                            <input type="hidden" name="product_id" v-model="product_id">
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline-danger" @click="closeModel()">
                                <i class="far fa-times-circle"></i>
                                Close
                            </button>

                            <button type="button" class="btn btn-primary" @click="onSave()" v-if="status == 'add'">
                                <i class="fas fa-save"></i>
                                Save
                            </button>
                            <button type="button" id="save" class="btn btn-success" @click="onUpdate()"
                                v-if="status == 'update'">
                                <i class="fas fa-download"></i>
                                Update
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <!-- End Insert New  -->

            <!-- Main content -->
            <div class="content">
                <div class="container-fluid">
                    <div class="row" style="justify-content: center;">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    <div class="row">
                                        <div class="col-sm-2">
                                            <button type="button" class="btn btn-outline-primary" @click="openModel()">
                                                <i class="fas fa-plus-circle"></i>
                                                New Product
                                            </button>
                                        </div>
                                        <div class="col-sm-4">
                                            <div class="input-group">
                                                <input class="form-control" type="search"
                                                    placeholder="Search product by name" v-model="search_name"
                                                    @input="filterProduct()">
                                            </div>
                                        </div>
                                        <div class="col-sm-4">

                                        </div>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive" style="height: 450px;overflow-y:scroll;">
                                        <table class="table table-striped border">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>#</th>
                                                    <th>Product</th>
                                                    <th>Qty</th>
                                                    <th>Cost</th>
                                                    <th>Price</th>
                                                    <th>Discount (%)</th>
                                                    <th>Image</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody id="userTableBody">
                                                <tr v-for="(product_item, index) in product_list">
                                                    <td class="text-center">{{ index + 1 }}</td>
                                                    <td class="text-left">{{ product_item.product }}</td>
                                                    <td class="text-center">
                                                        <div class="" v-if="product_item.qty <= 5"
                                                            style="background-color: red;color: white;border-radius: 5px;">
                                                            <i class="fa-solid fa-triangle-exclamation"></i>
                                                            {{ product_item.qty }}
                                                        </div>
                                                        <div class="" v-if="product_item.qty > 5"
                                                            style="background-color: green;color: white;border-radius: 5px;">
                                                            {{ product_item.qty }}
                                                        </div>
                                                    </td>
                                                    <td class="text-left">${{ product_item.cost }}</td>
                                                    <td class="text-left">${{ product_item.price }}</td>
                                                    <td class="text-center">%{{ product_item.discount }}</td>
                                                    <td class="text-left">
                                                        <img :src="product_item.image" alt="" style="width: 50px;">
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-outline-secondary mr-2"
                                                            @click="onDetail(product_item.id)">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-outline-danger mr-2"
                                                            @click="onDelete(product_item.id)">
                                                            <i class="fas fa-trash-alt"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-outline-warning mr-2"
                                                            @click="onEdit(product_item)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- /.row -->
                </div>
            </div>
            <!-- /.content -->
        </div>
        <!-- /.content-wrapper -->


        <!-- Pop up Product detail -->
        <div class="modal fade bd-example-modal-lg" id="ProductDetail" data-backdrop="static" data-keyboard="false"
            tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content" v-for="(product_item) in product_detail">
                    <div class="modal-header">
                        <h5 class="modal-title" id="staticBackdropLabel">Product ID:
                            <span
                                style="background-color: rgb(0, 42, 255);padding: 1px 40px;border-radius: 5px;color: white;">{{
                                product_id_detail }}</span>
                        </h5>
                        <h4>Category : {{ product_item.category }}</h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col" style="display: block;margin: auto;text-align: center;">
                                <img :src="product_item.image" alt="" style="width: 300px;">
                            </div>
                            <div class="col">
                                <h1>{{ product_item.product }}</h1>
                                <p>{{ product_item.description }}</p>
                                <div class="content">
                                    <h4>Price : ${{ product_item.price }}</h4>
                                    <h5>Cost : ${{ product_item.cost }}</h5>
                                    <h5>Discount: {{ product_item.discount }}%</h5>
                                    <h6>{{ product_item.sub_category }}</h6>
                                    <p
                                        style="display: inline;background-color: red;color: white;border-radius: 5px;padding: 3px 5px;">
                                        {{ product_item.condition_name }}
                                    </p>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-danger" @click="closeProductDetail()">
                            <i class="far fa-times-circle"></i>
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Pop up Invoice detail -->

        <!-- Main Footer -->
        <footer class="main-footer" style="text-align: center;">
            <span class="footer__copy">&#169; DUONG <span style="color: gold;">NAMFA</span>. All right
                reserve</span>
        </footer>
    </div>

    <!-- ./wrapper -->

    <%- include("admin_template/link_script.ejs") -%>
        <script>
            const { createApp } = Vue;
            createApp({
                created() {
                    this.GetProduct(),
                        this.getCategory(),
                        this.Getsize(),
                        this.GetStyle(),
                        this.GetCondition(),
                        this.GetSubCategory(),
                        this.setDefaultFile()
                },
                data() {
                    return {
                        product_list: [],
                        status: 'add',
                        product_id_detail: '',
                        product_detail: [],
                        category_list: [],
                        size_list: [],
                        style_list: [],
                        condition_list: [],
                        subcategory_list: [],
                        form: {
                            name: '',
                            descrition: '',
                            qty: null,
                            discount: 0,
                            cost: null,
                            price: null,
                            size: 0,
                            category: 0,
                            subcategory: 0,
                            style: 0,
                            condition: 0,
                            image_name: null
                        },
                        product_id: null,
                        search_name: null,
                        fileName: '', // To store the file name
                        imageSrc: '',
                        selectedFile: null
                    };
                },
                methods: {
                    async setDefaultFile() {
                        const response = await fetch('/img/default_image.jpg'); // Replace with the actual URL
                        const blob = await response.blob();
                        this.selectedFile = new File([blob], 'default_image.jpg', { type: blob.type });
                    },
                    triggerFileInput() {
                        this.$refs.fileInput.click();
                    },
                    handleFileUpload(event) {
                        const file = event.target.files[0];
                        this.selectedFile = event.target.files[0];
                        if (file) {
                            this.fileName = file.name; // Get the file name
                            const reader = new FileReader();
                            reader.onload = (e) => {
                                this.imageSrc = e.target.result; // Get the image preview
                            };
                            reader.readAsDataURL(file);
                        }
                    },
                    openModel() {
                        $('#myModal').modal('show');
                    },
                    closeModel() {
                        $('#myModal').modal('hide');
                        this.clearCode();
                    },
                    openProductDetail() {
                        $('#ProductDetail').modal('show');
                    },
                    closeProductDetail() {
                        $('#ProductDetail').modal('hide');
                        this.clearCode();
                    },
                    clearCode() {
                        this.product_id_detail = '',
                            this.product_detail = [],
                            this.form = {
                                name: '',
                                descrition: '',
                                qty: 0,
                                discount: 10,
                                cost: 0,
                                price: 0,
                                size: 0,
                                category: 0,
                                subcategory: 0,
                                style: 0,
                                condition: 0,
                                image_name: '/img/product-1.png'
                            },
                            this.search_name = null,
                            this.fileName = '',
                            this.imageSrc = ''
                    },
                    GetProduct() {
                        $.LoadingOverlay("show");
                        fetch('http://localhost:3000/api/get/allproduct')
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                return response.json();
                            })
                            .then(data => {
                                this.product_list = data;
                                $.LoadingOverlay("hide");
                            })
                            .catch(error => {
                                console.error('Error fetching data:', error);
                            });
                    },
                    onDelete(product_id) {
                        Swal.fire({
                            title: "Do you want to delete this item?",
                            showDenyButton: true,
                            // showCancelButton: true,
                            confirmButtonText: "Delete",
                            denyButtonText: `cancel`
                        }).then((result) => {
                            if (result.isConfirmed) {
                                let vm = this
                                $.LoadingOverlay("show");
                                let url_api = "http://127.0.0.1:3000/api/delete/product"
                                // Make a request for a user with a given ID
                                axios.post(url_api, { product_id: product_id })
                                    .then(function (response) {
                                        // handle success
                                        vm.GetProduct()
                                        $.LoadingOverlay("hide")
                                    })
                                    .catch(function (error) {
                                        console.log(error);
                                    });
                            } else if (result.isDenied) {
                                //
                            }
                        });
                    },
                    onSave() {
                        if (this.form.name == null || this.form.name == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter name...!",
                            });
                            return
                        }

                        if (this.form.qty == null || this.form.qty == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter qty...!",
                            });
                            return
                        }

                        if (this.form.cost == null || this.form.cost == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter cost...!",
                            });
                            return
                        }

                        if (this.form.price == null || this.form.price == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter price...!",
                            });
                            return
                        }

                        if (this.form.size == null || this.form.size == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter Size...!",
                            });
                            return
                        }

                        if (this.form.category == null || this.form.category == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter Category...!",
                            });
                            return
                        }

                        if (this.form.subcategory == null || this.form.subcategory == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter Sub Category...!",
                            });
                            return
                        }

                        const fd = new FormData();
                        fd.append('file', this.selectedFile, this.selectedFile.name);
                        fd.append('name', this.form.name);
                        fd.append('descriotion', this.form.descrition);
                        fd.append('qty', this.form.qty);
                        fd.append('discount', this.form.discount);
                        fd.append('cost', this.form.cost);
                        fd.append('price', this.form.price);
                        fd.append('size', this.form.size);
                        fd.append('category', this.form.category);
                        fd.append('subcategory', this.form.subcategory);
                        fd.append('style', this.form.style);
                        fd.append('condition', this.form.condition);
                        fd.append('image_name', this.selectedFile.name);
                        let vm = this;
                        $.LoadingOverlay("show");
                        axios.post('http://localhost:3000/api/create/product', fd, {
                            headers: {
                                'Content-Type': 'multipart/form-data',
                            },
                        })
                            .then(function (response) {
                                vm.GetProduct();
                                $.LoadingOverlay("hide");
                                Swal.fire({
                                    icon: "success",
                                    title: "Order Success",
                                    showConfirmButton: false
                                });
                                vm.closeModel();
                                console.log(response.data);
                            })
                            .catch(function (error) {
                                // Handle error
                                console.error(error);
                            });


                    },
                    onEdit(product_item) {
                        console.log(product_item);
                        this.status = 'update',
                            this.form.name = product_item.product,
                            this.form.descrition = product_item.description,
                            this.form.qty = product_item.qty,
                            this.form.discount = product_item.discount,
                            this.form.cost = product_item.cost,
                            this.form.price = product_item.price,
                            this.form.size = product_item.size_id,
                            this.form.category = product_item.category_id,
                            this.form.subcategory = product_item.subcategory_id,
                            this.form.style = product_item.style_id,
                            this.form.condition = product_item.condition_id,
                            this.form.image_name = product_item.image,
                            this.product_id = product_item.id,
                            this.imageSrc = product_item.image,
                            this.openModel()
                    },
                    onUpdate() {
                        if (this.form.name == null || this.form.name == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter name...!",
                            });
                            return
                        }

                        if (this.form.qty == null || this.form.qty == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter qty...!",
                            });
                            return
                        }

                        if (this.form.cost == null || this.form.cost == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter cost...!",
                            });
                            return
                        }

                        if (this.form.price == null || this.form.price == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter price...!",
                            });
                            return
                        }

                        if (this.form.size == null || this.form.size == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter Size...!",
                            });
                            return
                        }

                        if (this.form.category == null || this.form.category == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter Category...!",
                            });
                            return
                        }

                        if (this.form.subcategory == null || this.form.subcategory == '') {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Please enter Sub Category...!",
                            });
                            return
                        }

                        const fd = new FormData();
                        fd.append('file', this.selectedFile, this.selectedFile.name);
                        fd.append('name', this.form.name);
                        fd.append('descrition', this.form.descrition);
                        fd.append('qty', this.form.qty);
                        fd.append('discount', this.form.discount);
                        fd.append('cost', this.form.cost);
                        fd.append('price', this.form.price);
                        fd.append('size', this.form.size);
                        fd.append('category', this.form.category);
                        fd.append('subcategory', this.form.subcategory);
                        fd.append('style', this.form.style);
                        fd.append('condition', this.form.condition);
                        fd.append('image_name', this.selectedFile.name);
                        fd.append('id', this.product_id);

                        let vm = this;
                        $.LoadingOverlay("show");
                        axios.post('http://localhost:3000/api/update/product', fd, {
                            headers: {
                                'Content-Type': 'multipart/form-data',
                            },
                        })
                            .then(function (response) {
                                vm.GetProduct();
                                $.LoadingOverlay("hide");
                                Swal.fire({
                                    icon: "success",
                                    title: "Order Success",
                                    showConfirmButton: false
                                });
                                vm.closeModel();
                                console.log(response.data);
                            })
                            .catch(function (error) {
                                // Handle error
                                console.error(error);
                            });
                    },
                    onDetail(product_id) {
                        this.product_id_detail = product_id;
                        $.LoadingOverlay("show");
                        fetch('http://localhost:3000/api/get/product_detail?product_id_detail=' + product_id)
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                return response.json();
                            })
                            .then(data => {
                                this.openProductDetail()
                                this.product_detail = data;
                                $.LoadingOverlay("hide");
                            })
                            .catch(error => {
                                console.error('Error fetching data:', error);
                            });
                    },
                    getCategory() {
                        $.LoadingOverlay("show");
                        fetch('http://localhost:3000/api/list/allcategory')
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                return response.json();
                            })
                            .then(data => {
                                this.category_list = data;
                                $.LoadingOverlay("hide");
                            })
                            .catch(error => {
                                console.error('Error fetching data:', error);
                            });
                    },
                    Getsize() {
                        $.LoadingOverlay("show");
                        fetch('http://localhost:3000/api/list/allsizes')
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                return response.json();
                            })
                            .then(data => {
                                this.size_list = data;
                                $.LoadingOverlay("hide");
                            })
                            .catch(error => {
                                console.error('Error fetching data:', error);
                            });
                    },
                    GetStyle() {
                        $.LoadingOverlay("show");
                        fetch('http://localhost:3000/api/list/allstyle')
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                return response.json();
                            })
                            .then(data => {
                                this.style_list = data;
                                $.LoadingOverlay("hide");
                            })
                            .catch(error => {
                                console.error('Error fetching data:', error);
                            });
                    },
                    GetCondition() {
                        $.LoadingOverlay("show");
                        fetch('http://localhost:3000/api/list/allcondition')
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                return response.json();
                            })
                            .then(data => {
                                this.condition_list = data;
                                $.LoadingOverlay("hide");
                            })
                            .catch(error => {
                                console.error('Error fetching data:', error);
                            });
                    },
                    GetSubCategory() {
                        $.LoadingOverlay("show");
                        fetch('http://localhost:3000/api/list/allsubCategory')
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                return response.json();
                            })
                            .then(data => {
                                this.subcategory_list = data;
                                $.LoadingOverlay("hide");
                            })
                            .catch(error => {
                                console.error('Error fetching data:', error);
                            });
                    },
                    filterProduct() {
                        if (this.search_name != null || this.search_name != '') {
                            let searchname = this.search_name;
                            let vm = this;
                            fetch('http://localhost:3000/search/product?searchname=' + searchname)
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error('Network response was not ok');
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    this.product_list = data;
                                })
                                .catch(error => {
                                    console.error('Error fetching data:', error);
                                });
                        }
                        else {
                            this.GetCondition();
                        }
                    }
                },
            }).mount('#app');
        </script>
</body>

</html>